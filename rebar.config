%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 ft=erlang et
%% This is a sample rebar.conf file that shows examples of some of rebar's
%% options.

%% == Core ==
%% Additional library directories to add to the code path
{lib_dirs, [lib]}.

%% == EDoc ==

%% EDoc options
{edoc_opts, []}.

%% == EUnit ==

%% Options for eunit:test()
{eunit_opts, []}.

%% Additional compile options for eunit. erl_opts is also used
{eunit_compile_opts, []}.

%% Same as erl_first_files, but used only when running 'eunit'
{eunit_first_files, []}.

%% == Common Test ==

%% Override the default "test" directory in which SUITEs are located
{ct_dir, "itest"}.

%% Override the default "logs" directory in which SUITEs are logged
{ct_log_dir, "test/logs"}.

%% Option to pass extra parameters when launching Common Test
{ct_extra_params, "-boot start_sasl -s myapp"}.

%% Option to use short names (i.e., -sname test) when starting ct
{ct_use_short_names, true}.

%% == Cleanup ==

%% Which files to cleanup
{clean_files, ["file", "file2"]}.

%% == OTP Applications ==

%% Enable validation of the OTP app module list. Default is 'true'
{validate_app_modules, true}.

%% == Dependencies ==

%% Where to put any downloaded dependencies. Default is "deps"
{deps_dir, "deps"}.

%% What dependencies we have, dependencies can be of 3 forms, an application
%% name as an atom, eg. mochiweb, a name and a version (from the .app file), or
%% an application name, a version and the SCM details on how to fetch it (SCM
%% type, location and revision).
%% Rebar currently supports git, hg, bzr, svn, and rsync.
{deps, [
]}.

	%% application_name,
        %% {application_name, "1.0.*"},
        %% {application_name, "1.0.*",
        %%  {git, "git://github.com/rebar/rebar.git", {branch, "master"}}},
        %% Dependencies can be marked as 'raw'. Rebar does not require
        %% such dependencies to have a standard Erlang/OTP layout
        %% which assumes the presence of either
        %% "src/dependency_name.app.src" or "ebin/dependency_name.app"
        %% files.
        %%
        %% 'raw' dependencies can still contain 'rebar.config' and
        %% even can have the proper OTP directory layout, but they
        %% won't be compiled.
        %%
        %% Only a subset of rebar commands will be executed on the
        %% 'raw' subdirectories: get-deps, update-deps, check-deps,
        %% list-deps and delete-deps.
        %% {application_name, "",
        %%  {git, "git://github.com/rebar/rebar.git", {branch, "master"}},
        %%  [raw]}]}.

%% == Subdirectories ==

%% Subdirectories?
{sub_dirs, []}.

{erl_opts, [
	debug_info
%        {src_dirs, ["src", "test"]}
]}.

